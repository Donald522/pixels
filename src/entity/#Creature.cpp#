#include "entity/Creature.h"
#include "resource/DataTables.h"
#include "util/Utility.h"
#include "entity/Pickup.h"
#include "system/CommandQueue.h"
#include "resource/ResourceHolder.h"
#include "nodes/EmitterNode.h"
#include "log/Log.h"

#include <SFML/Graphics/RenderTarget.hpp>
#include <SFML/Graphics/RenderStates.hpp>

#include <cmath>


namespace
{
	const std::vector<AircraftData> Table = InitializeAircraftData( );
}


Creature::Creature( SceneGrid* sceneGrid, Type_t type, const TextureHolder& textures, const FontHolder& fonts )
: Entity(sceneGrid, Table[type].hitpoints )
, m_type( type )
, m_sprite( textures.Get( Table[type].texture ), Table[type].textureRect )
, m_explosion( textures.Get( Textures::Explosion ) )
, m_fireCommand( )
, m_missileCommand( )
, m_fireCountdown( sf::Time::Zero )
, m_isFiring( false )
, m_isLaunchingMissile( false )
, m_showExplosion( true )
, m_spawnedPickup(false)
, m_fireRateLevel( 1 )
, m_spreadLevel( 1 )
, m_missileAmmo( 2000 )
, m_dropPickupCommand( )
, m_travelledDistance( 0.f )
, m_directionIndex( 0 )
, m_healthDisplay( nullptr )
, m_missileDisplay( nullptr )
{
	LogInfo( "Create creature: type = " + std::to_string( type ) ); 
	m_explosion.setFrameSize( sf::Vector2i( 256, 256 ) );
	m_explosion.setNumFrames( 16 );
	m_explosion.setRepeating( false );
	m_explosion.setDuration( sf::seconds( 1 ) );

	CenterOrigin( m_explosion );

	setScale( 0.9f, 0.9f );
	CenterOrigin( m_sprite );

	m_fireCommand.category = Category::SceneAirLayer;
	m_fireCommand.action = [ this, &textures ]( SceneNode& node, sf::Time )
	{
		CreateBullets( node, textures );
	};

	m_missileCommand.category = Category::SceneAirLayer;
	m_missileCommand.action = [ this, &textures ]( SceneNode& node, sf::Time )
	{
		CreateProjectile( node, Projectile::Missile, 0.f, 0.5f, textures );
	};

	m_dropPickupCommand.category = Category::SceneAirLayer;
	m_dropPickupCommand.action = [ this, &textures ]( SceneNode& node, sf::Time )
	{
		CreatePickup( node, textures );
	};

	std::unique_ptr<TextNode> healthDisplay( new TextNode( fonts, "" ) );
	m_healthDisplay = healthDisplay.get( );
	AttachChild( std::move( healthDisplay ) );

	if ( GetCategory( ) == Category::PlayerAircraft )
	{
		std::unique_ptr<TextNode> missileDisplay( new TextNode( fonts, "" ) );
		missileDisplay->setPosition( 0, 70 );
		m_missileDisplay = missileDisplay.get( );
		AttachChild( std::move( missileDisplay ) );

		std::unique_ptr<EmitterNode> propellant1( new EmitterNode( Particle::EnginePower ) );
		propellant1->setPosition( -GetBoundingRect( ).width / 4.0f, GetBoundingRect( ).height / 1.5f - 20.0f );
		AttachChild( std::move( propellant1 ) );

		std::unique_ptr<EmitterNode> propellant2( new EmitterNode( Particle::EnginePower ) );
		propellant2->setPosition( GetBoundingRect( ).width / 4.0f, GetBoundingRect( ).height / 1.5f - 20.0f );
		AttachChild( std::move( propellant2 ) );

	}
		
	UpdateTexts( );
}

void Creature::DrawCurrent( sf::RenderTarget& target, sf::RenderStates states ) const
{
	if ( IsDestroyed( ) && m_showExplosion )
		target.draw( m_explosion, states );
	else
		target.draw( m_sprite, states );
}

void Creature::UpdateCurrent( sf::Time dt, CommandQueue& commands )
{
	UpdateTexts();
	if ( IsDestroyed( ) )
	{
		CheckPickupDrop( commands );
		m_explosion.Update( dt );
		return;
	}

	CheckProjectileLaunch( dt, commands );
	UpdateMovementPattern( dt );

	Entity::UpdateCurrent( dt, commands );
}

Category::Type_t Creature::GetCategory( ) const
{
	if ( IsAllied( ) )
		return Category::PlayerAircraft;
	else
		return Category::EnemyAircraft;
}

sf::FloatRect Creature::GetBoundingRect( ) const
{
	return GetWorldTransform( ).transformRect( m_sprite.getGlobalBounds( ) );
}

bool Creature::IsMarkedForRemoval( ) const
{
	return IsDestroyed( ) && ( m_explosion.isFinished( ) || !m_showExplosion );
}

bool Creature::IsAllied( ) const
{
	return m_type == PlayerStarship;
}

float Creature::GetSpeed( ) const
{
	return Table[m_type].speed;
}

Creature::Type_t  Creature::GetType() const
{
	return m_type;
}

void Creature::IncreaseFireRate( )
{
	if ( m_fireRateLevel < 10 )
		++m_fireRateLevel;
}

void Creature::IncreaseSpread( )
{
	if ( m_spreadLevel < 4 )
		++m_spreadLevel;
}

void Creature::CollectMissiles( unsigned int count )
{
	m_missileAmmo += count;
}

void Creature::Fire( )
{
	if ( Table[m_type].fireInterval != sf::Time::Zero )
		m_isFiring = true;
}

void Creature::LaunchMissile( )
{
	if ( m_missileAmmo > 0 )
	{
		m_isLaunchingMissile = true;
		--m_missileAmmo;
	}
}

void Creature::Remove( )
{
	Entity::Remove( );
	m_showExplosion = false;
}


void Creature::UpdateMovementPattern( sf::Time dt )
{
	const std::vector<Direction>& directions = Table[m_type].directions;

	if ( !directions.empty( ) )
	{
		// Moved long enough in current direction: Change direction
		if ( m_travelledDistance > directions[m_directionIndex].distance )
		{
			m_directionIndex = ( m_directionIndex + 1 ) % directions.size( );
			m_travelledDistance = 0.f;
		}

		// Compute velocity from direction
		float radians = ToRadian( directions[m_directionIndex].angle + 90.f );
		float vx = GetSpeed( ) * std::cos( radians );
		float vy = GetSpeed( ) * std::sin( radians );

		SetVelocity( vx, vy );

		m_travelledDistance += GetSpeed( ) * dt.asSeconds( );
	}
}

void Creature::CheckPickupDrop( CommandQueue& commands )
{
	if ( !IsAllied() && RandomInt( 4 ) == 0 && !m_spawnedPickup )
		commands.Push( m_dropPickupCommand );
	m_spawnedPickup = true;
}

void Creature::CheckProjectileLaunch( sf::Time dt, CommandQueue& commands )
{
	if ( !IsAllied( ) )
		Fire( );

	if ( m_isFiring && m_fireCountdown <= sf::Time::Zero )
	{
		commands.Push( m_fireCommand );
		m_fireCountdown += Table[m_type].fireInterval / ( m_fireRateLevel + 1.f );
		m_isFiring = false;
	}
	else if ( m_fireCountdown > sf::Time::Zero )
	{
		m_fireCountdown -= dt;
		m_isFiring = false;
	}

	if ( m_isLaunchingMissile )
	{
		commands.Push( m_missileCommand );
		m_isLaunchingMissile = false;
	}
}

void Creature::CreateBullets( SceneNode& node, const TextureHolder& textures ) const
{
	Projectile::Type_t type = IsAllied( ) ? Projectile::AlliedBullet : Projectile::EnemyBullet;

	switch ( m_spreadLevel )
	{
	case 1:
		CreateProjectile( node, type, 0.0f, 0.5f, textures );
		break;

	case 2:
		CreateProjectile( node, type, -0.23f, 0.33f, textures );
		CreateProjectile( node, type, +0.23f, 0.33f, textures );
		break;

	case 3:
		CreateProjectile( node, type, -0.33f, 0.33f, textures );
		CreateProjectile( node, type, 0.0f, 0.5f, textures );
		CreateProjectile( node, type, +0.33f, 0.33f, textures );
		break;
	case 4:
		CreateProjectile( node, type, -0.33f, 0.33f, textures );
		CreateProjectile( node, type, -0.17f, 0.5f, textures );
		CreateProjectile( node, type, +0.17f, 0.5f, textures );
		CreateProjectile( node, type, +0.33f, 0.33f, textures );
		break;
	}
}

void Creature::CreateProjectile( SceneNode& node, Projectile::Type_t type, float xOffset, float yOffset, const TextureHolder& textures ) const
{
	std::unique_ptr<Projectile> projectile( new Projectile( m_sceneGrid, type, textures ) );

	sf::Vector2f offset( xOffset * m_sprite.getGlobalBounds( ).width, yOffset * m_sprite.getGlobalBounds( ).height );
	sf::Vector2f velocity( 0, projectile->GetSpeed( ) );

	float sign = IsAllied( ) ? -1.0f : +1.0f;
	projectile->setPosition( GetWorldPosition( ) + offset * sign );
	projectile->SetVelocity( velocity * sign );
	node.AttachChild( std::move( projectile ) );
}

void Creature::CreatePickup( SceneNode& node, const TextureHolder& textures ) const
{
	auto type = static_cast<Pickup::Type_t>( RandomInt( Pickup::TypeCount ) );

	std::unique_ptr<Pickup> pickup( new Pickup( m_sceneGrid, type, textures ) );
	pickup->setPosition( GetWorldPosition( ) );
	pickup->SetVelocity( 0.f, 1.f );
	node.AttachChild( std::move( pickup ) );
}

void Creature::UpdateTexts( )
{
	m_healthDisplay->SetString(  ToString( GetHitpoints( ) ) + " HP" );
	m_healthDisplay->setPosition( 0.f, 80.f );
	m_healthDisplay->setRotation( -getRotation( ) );

	if ( m_missileDisplay )
	{
		m_missileDisplay->setPosition( 0.0f, 50.0f );
		if ( m_missileAmmo == 0 )
			m_missileDisplay->SetString( "" );
		else
			m_missileDisplay->SetString( "M: " + ToString( m_missileAmmo ) );
	}
}
